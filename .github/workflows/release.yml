name: Tauri Build and Release

on:
  push:
    branches:
      - main  # فقط زمانی که به main پوش می‌شود اجرا شود

# ⬇️ قدم مهم برای حل مشکل 403
# به توکن اتوماتیک گیت‌هاب اکشنز دسترسی «نوشتن» می‌دهیم
permissions:
  contents: write

jobs:
  # --- JOB 1: ساخت تمام پلتفرم‌ها ---
  build:
    runs-on: macos-latest # برای ساخت همه پلتفرم‌ها از مک استفاده می‌کنیم
    strategy:
      fail-fast: false # اگر یک پلتفرم فیل شد، بقیه ادامه دهند
      matrix:
        platform: [web, macos, windows, linux]
        # اندروید و iOS نیاز به تنظیمات بسیار پیچیده‌تر و ساین کردن دارند
        # فعلا روی دسکتاپ و وب تمرکز می‌کنیم
        # platform: [web, macos, windows, linux, android, ios]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # از نسخه جدیدتر استفاده کنید

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Dependencies
        run: pnpm install

      - name: Install Tauri CLI
        run: pnpm add -g @tauri-apps/cli

      - name: Build Web (PWA)
        if: matrix.platform == 'web'
        run: pnpm run build
      
      - name: Build Tauri App (Desktop)
        # این دستور تمام دسکتاپ‌ها را می‌سازد
        # برای سادگی، می‌توانیم همه را روی یک رانر مک بسازیم
        if: matrix.platform != 'web'
        run: pnpm tauri build --target ${{ matrix.platform }}

      # --- ⬇️ بخش کلیدی: آپلود خروجی ---
      - name: Upload Web Artifact
        if: matrix.platform == 'web'
        uses: actions/upload-artifact@v4
        with:
          name: web-dist # اسم آرتیفکت
          path: ./dist # مسیری که pnpm run build خروجی می‌دهد

      - name: Upload Desktop Artifacts
        if: matrix.platform != 'web'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build # اسمی مثل macos-build, windows-build
          # مسیر خروجی‌های tauri build
          # ممکن است نیاز به تنظیم دقیق‌تر مسیر داشته باشید
          path: |
            src-tauri/target/release/bundle/
            !src-tauri/target/release/bundle/appimage/

  # --- JOB 2: ایجاد Release نهایی ---
  release:
    runs-on: ubuntu-latest
    needs: build # ⬇️ مهم: منتظر می‌ماند تا تمام build ها تمام شوند
    if: github.ref == 'refs/heads/main' # فقط روی main اجرا شود

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      # --- ⬇️ بخش کلیدی: دانلود همه خروجی‌ها ---
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          # همه‌ی آرتیفکت‌ها را در پوشه dist دانلود کن
          path: ./dist
          
      - name: Display structure of downloaded files
        run: ls -R ./dist

      # --- ⬇️ بخش کلیدی: ساخت Release واحد ---
      - name: Create Release
        run: |
          VERSION="v$(date +'%Y%m%d%H%M%S')"
          # تمام فایل‌های داخل تمام پوشه‌های دانلود شده را به Release ضمیمه کن
          gh release create $VERSION ./dist/*/* --title "Automated Release $VERSION" --notes "Automated build of version $VERSION"
        env:
          GH_TOKEN: ${{ github.token }} # ❗️ از همین توکن اتوماتیک استفاده می‌کنیم